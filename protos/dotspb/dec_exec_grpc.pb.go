// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package dotspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// DecExecClient is the client API for DecExec service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DecExecClient interface {
	Exec(ctx context.Context, in *App, opts ...grpc.CallOption) (*Result, error)
	UploadBlob(ctx context.Context, in *Blob, opts ...grpc.CallOption) (*Result, error)
	RetrieveBlob(ctx context.Context, in *Blob, opts ...grpc.CallOption) (*Blob, error)
}

type decExecClient struct {
	cc grpc.ClientConnInterface
}

func NewDecExecClient(cc grpc.ClientConnInterface) DecExecClient {
	return &decExecClient{cc}
}

func (c *decExecClient) Exec(ctx context.Context, in *App, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/dec_exec.DecExec/Exec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *decExecClient) UploadBlob(ctx context.Context, in *Blob, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/dec_exec.DecExec/UploadBlob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *decExecClient) RetrieveBlob(ctx context.Context, in *Blob, opts ...grpc.CallOption) (*Blob, error) {
	out := new(Blob)
	err := c.cc.Invoke(ctx, "/dec_exec.DecExec/RetrieveBlob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DecExecServer is the server API for DecExec service.
// All implementations must embed UnimplementedDecExecServer
// for forward compatibility
type DecExecServer interface {
	Exec(context.Context, *App) (*Result, error)
	UploadBlob(context.Context, *Blob) (*Result, error)
	RetrieveBlob(context.Context, *Blob) (*Blob, error)
	mustEmbedUnimplementedDecExecServer()
}

// UnimplementedDecExecServer must be embedded to have forward compatible implementations.
type UnimplementedDecExecServer struct {
}

func (UnimplementedDecExecServer) Exec(context.Context, *App) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exec not implemented")
}
func (UnimplementedDecExecServer) UploadBlob(context.Context, *Blob) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadBlob not implemented")
}
func (UnimplementedDecExecServer) RetrieveBlob(context.Context, *Blob) (*Blob, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveBlob not implemented")
}
func (UnimplementedDecExecServer) mustEmbedUnimplementedDecExecServer() {}

// UnsafeDecExecServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DecExecServer will
// result in compilation errors.
type UnsafeDecExecServer interface {
	mustEmbedUnimplementedDecExecServer()
}

func RegisterDecExecServer(s *grpc.Server, srv DecExecServer) {
	s.RegisterService(&_DecExec_serviceDesc, srv)
}

func _DecExec_Exec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(App)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DecExecServer).Exec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dec_exec.DecExec/Exec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DecExecServer).Exec(ctx, req.(*App))
	}
	return interceptor(ctx, in, info, handler)
}

func _DecExec_UploadBlob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Blob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DecExecServer).UploadBlob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dec_exec.DecExec/UploadBlob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DecExecServer).UploadBlob(ctx, req.(*Blob))
	}
	return interceptor(ctx, in, info, handler)
}

func _DecExec_RetrieveBlob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Blob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DecExecServer).RetrieveBlob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dec_exec.DecExec/RetrieveBlob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DecExecServer).RetrieveBlob(ctx, req.(*Blob))
	}
	return interceptor(ctx, in, info, handler)
}

var _DecExec_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dec_exec.DecExec",
	HandlerType: (*DecExecServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Exec",
			Handler:    _DecExec_Exec_Handler,
		},
		{
			MethodName: "UploadBlob",
			Handler:    _DecExec_UploadBlob_Handler,
		},
		{
			MethodName: "RetrieveBlob",
			Handler:    _DecExec_RetrieveBlob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dec_exec.proto",
}
